name: "Slo mutex action"
description: "Obtain or release mutex"
author: "Ilya Shevchenko <id.shev@yandex.ru>"

inputs:
  KUBE_CONFIG:
    description: "base64 kube config"
    required: true
  language_id:
    description: "Language variant to obtain mutex by"
    required: true
  command:
    description: "`obtain` or `release` command"
    required: true

runs:
  using: "composite"
  steps:
    - run: mkdir $HOME/.kube; echo "${{ inputs.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
      shell: bash

    - name: Get existing mutex configmap
      run: kubectl get configmaps slo-mutex -o=yaml
      shell: bash

    - name: Check if locked
      if: inputs.command == 'obtain'
      run: |
        if test -n "`kubectl get configmaps slo-mutex -o=jsonpath={.data.busy}`"; then
          echo "Locked by `kubectl get configmaps slo-mutex -o=jsonpath={.data.lockedBy}`, wait";
        fi
      shell: bash

    - name: Wait until unlocked (maximum 30 minutes waiting)
      if: inputs.command == 'obtain'
      # check every 30s for 60 times = 30 minutes
      run: |
        for run in {1..60}; do
          if test -z "`kubectl get configmaps slo-mutex -o=jsonpath={.data.busy}`"; then
            echo "Mutex unlocked!"; break;
          elif test $run == 60; then
            echo "Timeout!"; exit 4;
          fi;
          sleep 30;
        done

        kubectl create configmap slo-mutex --from-literal=busy=true --from-literal=lockedBy=${{ inputs.language_id }} -o=yaml --dry-run=client | kubectl apply -f -
      shell: bash

    - name: Unlock mutex
      if: inputs.command == 'release'
      run: >
        kubectl create configmap slo-mutex -o=yaml --dry-run=client | kubectl apply -f -
      shell: bash

    - name: Get mutex configmap
      run: kubectl get configmaps slo-mutex -o=yaml
      shell: bash
